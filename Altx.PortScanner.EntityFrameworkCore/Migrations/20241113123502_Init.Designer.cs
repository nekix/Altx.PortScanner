// <auto-generated />
using System;
using Altx.PortScanner.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Altx.PortScanner.Migrations
{
    [DbContext(typeof(ScanTaskDbContext))]
    [Migration("20241113123502_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Altx.PortScanner.ScanResult", b =>
                {
                    b.Property<Guid>("ScanTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ScanTaskId");

                    b.ToTable("ScanResult");
                });

            modelBuilder.Entity("Altx.PortScanner.ScanTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ScanTasks");
                });

            modelBuilder.Entity("Altx.PortScanner.ScanResult", b =>
                {
                    b.HasOne("Altx.PortScanner.ScanTask", null)
                        .WithOne("Result")
                        .HasForeignKey("Altx.PortScanner.ScanResult", "ScanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Altx.PortScanner.ScanPortInfo", "Ports", b1 =>
                        {
                            b1.Property<Guid>("ScanResultScanTaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("PortNumber")
                                .HasColumnType("integer");

                            b1.Property<int>("State")
                                .HasColumnType("integer");

                            b1.HasKey("ScanResultScanTaskId", "Id");

                            b1.ToTable("ScanResult");

                            b1.ToJson("Ports");

                            b1.WithOwner()
                                .HasForeignKey("ScanResultScanTaskId");
                        });

                    b.Navigation("Ports");
                });

            modelBuilder.Entity("Altx.PortScanner.ScanTask", b =>
                {
                    b.OwnsOne("Altx.PortScanner.Host", "Host", b1 =>
                        {
                            b1.Property<Guid>("ScanTaskId")
                                .HasColumnType("uuid");

                            b1.Property<string>("HostName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("HostName");

                            b1.HasKey("ScanTaskId");

                            b1.ToTable("ScanTasks");

                            b1.WithOwner()
                                .HasForeignKey("ScanTaskId");
                        });

                    b.OwnsOne("Altx.PortScanner.PortRange", "PortRange", b1 =>
                        {
                            b1.Property<Guid>("ScanTaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("StartPort")
                                .HasColumnType("integer")
                                .HasColumnName("EndPort");

                            b1.HasKey("ScanTaskId");

                            b1.ToTable("ScanTasks");

                            b1.WithOwner()
                                .HasForeignKey("ScanTaskId");
                        });

                    b.OwnsOne("Altx.PortScanner.ScanOptions", "Options", b1 =>
                        {
                            b1.Property<Guid>("ScanTaskId")
                                .HasColumnType("uuid");

                            b1.Property<int[]>("PortScanTypes")
                                .IsRequired()
                                .HasColumnType("integer[]")
                                .HasColumnName("ScanTypes");

                            b1.HasKey("ScanTaskId");

                            b1.ToTable("ScanTasks");

                            b1.WithOwner()
                                .HasForeignKey("ScanTaskId");
                        });

                    b.Navigation("Host")
                        .IsRequired();

                    b.Navigation("Options")
                        .IsRequired();

                    b.Navigation("PortRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Altx.PortScanner.ScanTask", b =>
                {
                    b.Navigation("Result");
                });
#pragma warning restore 612, 618
        }
    }
}
